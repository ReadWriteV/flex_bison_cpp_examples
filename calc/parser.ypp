%require "3.2"
%language "c++"

%define api.parser.class {Parser}
%define api.value.type variant
%define api.value.automove true
%define api.token.raw
%define api.token.constructor

%define parse.assert
%define parse.trace
%define parse.error detailed
%define parse.lac full

%locations

%param {yy::Scanner &scanner}

%code requires
{
#include "ast.hpp"

#include <string>

namespace yy {
    class Scanner;
}
}

%code {
#include "scanner.hpp"

#include <print>

yy::Parser::symbol_type yylex(yy::Scanner &scanner) {
    return scanner.scan();
}
}

%token COMMA ","
%token SIMECOLON ";"

%token ASSIGN "="
%token ADD "+"
%token SUB "-"
%token MUL "*"
%token DIV "/"
%token ABS "|"
%token EOL "\n"

%token OP "("
%token CP ")"

%token IF "if"
%token THEN "then"
%token ELSE "else"
%token WHILE "while"
%token DO "do"
%token LET "let"

%token <double> NUMBER
%token <std::string> NAME
%token <FnCall::builtin_func> FUNC
%token <Node::type> CMP

%nterm <ast_type> exp stmt list explist
%nterm <symbol_list_type> symlist

%nonassoc CMP
%right "="
%left "+" "-"
%left "*" "/"
%nonassoc "|" UMINUS

%printer { yyo << "FnCall::builtin_func: " << std::to_underlying($$); } <FnCall::builtin_func>
%printer { yyo << "Node::type: " << std::to_underlying($$); } <Node::type>
%printer { yyo << "symbol_list_type, size: " << $$.size(); } <symbol_list_type>
%printer { yyo << $$; } <*>;

%start calclist

%%

calclist:
    %empty { /* empty */ }
|   calclist "\n" { std::print("> "); }
|   calclist stmt "\n" { std::print("= {:4.4f}\n> ", $2->eval()); }
|   calclist LET NAME "(" symlist ")" "=" list "\n" { auto name = $3; make_def(name, $5, $8); std::print("Defined {}\n> ", name); }
|   calclist error "\n" { yyerrok; std::print("> "); }
;

stmt:
    "if" exp "then" list { $$ = make_branch($2, $4); }
|   "if" exp "then" list "else" list { $$ = make_branch($2, $4, $6); }
|   "while" exp "do" list { $$ = make_loop($2, $4); }
|   exp
;

list:
    %empty { $$ = nullptr; }
|   stmt ";" list { if ($3 == nullptr) { $$ = $1; } else { $$ = make_node(Node::type::list, $1, $3); } }
;

exp:
    exp CMP exp { $$ = make_node($2, $1, $3); }
|   exp "+" exp { $$ = make_node(Node::type::add, $1, $3); }
|   exp "-" exp { $$ = make_node(Node::type::sub, $1, $3); }
|   exp "*" exp { $$ = make_node(Node::type::mul, $1, $3); }
|   exp "/" exp { $$ = make_node(Node::type::div, $1, $3); }
|   "|" exp { $$ = make_node(Node::type::abs, $2); }
|   "(" exp ")" { $$ = $2; }
|   "-" exp %prec UMINUS { $$ = make_node(Node::type::minus, $2); }
|   NUMBER { $$ = make_number($1); }
|   NAME { $$ = make_ref($1); }
|   NAME "=" exp { $$ = make_asgn($1, $3); }
|   FUNC "(" explist ")" { $$ = make_func($1, $3); }
|   NAME "(" explist ")" { $$ = make_call($1, $3); }
;

explist:
    exp
|   exp "," explist { $$ = make_node(Node::type::list, $1, $3); }
;

symlist:
    NAME { $$ = make_symlist($1); }
|   NAME "," symlist { $$ = make_symlist($1, $3); }
;

%%

void yy::Parser::error(const location_type& loc, const std::string& msg)
{
    std::cout << "ERROR at "<< loc << ", message: " << msg << std::endl;
}